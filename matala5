
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nCPZ7bsvaxom",
    "outputId": "2999a99c-33fd-40ff-b9f6-b8089db503e3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting googlemaps\n",
      "  Downloading googlemaps-4.6.0.tar.gz (31 kB)\n",
      "Requirement already satisfied: requests<3.0,>=2.20.0 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from googlemaps) (2.25.1)\n",
      "Requirement already satisfied: idna<3,>=2.5 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from requests<3.0,>=2.20.0->googlemaps) (2.10)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from requests<3.0,>=2.20.0->googlemaps) (2020.12.5)\n",
      "Requirement already satisfied: chardet<5,>=3.0.2 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from requests<3.0,>=2.20.0->googlemaps) (4.0.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from requests<3.0,>=2.20.0->googlemaps) (1.26.4)\n",
      "Building wheels for collected packages: googlemaps\n",
      "  Building wheel for googlemaps (setup.py): started\n",
      "  Building wheel for googlemaps (setup.py): finished with status 'done'\n",
      "  Created wheel for googlemaps: filename=googlemaps-4.6.0-py3-none-any.whl size=38531 sha256=cf67f2f6e340c4fc3f091eb88ce81e3331583344a269a0d5d8602fb6c4a7af7d\n",
      "  Stored in directory: c:\\users\\shilat twito\\appdata\\local\\pip\\cache\\wheels\\2d\\e9\\ee\\336c1792ed04efbf4fe9c89662d701f5c1f1fdddf8782951d3\n",
      "Successfully built googlemaps\n",
      "Installing collected packages: googlemaps\n",
      "Successfully installed googlemaps-4.6.0\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (4.9.3)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\shilat twito\\anaconda3\\lib\\site-packages (from beautifulsoup4) (2.2.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install -U googlemaps\n",
    "!pip install beautifulsoup4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "IlqwGYRZS4M8"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "import googlemaps\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "AI82vYvHSewW"
   },
   "outputs": [],
   "source": [
    "cities_df = pd.read_csv(\"destinations_LP_crawler_Ex5.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "pAU3UhJfS_mn"
   },
   "outputs": [],
   "source": [
    "api_key = \"FakeApi\"\n",
    "google_geolocation_api = googlemaps.Client(key=api_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "NLjZxFKnYi-i"
   },
   "outputs": [],
   "source": [
    "def get_country_from_city(city):\n",
    "    geo_results = google_geolocation_api.geocode(city)\n",
    "    if len(geo_results):\n",
    "        geo_result_levels = geo_results[0]['address_components']\n",
    "        countries = [geo_result['long_name'] for geo_result in geo_result_levels if 'country' in geo_result['types']]\n",
    "        return countries[0] if len(countries) else None\n",
    "\n",
    "cities_df['country'] = cities_df['city_LP'].apply(get_country_from_city)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "FAGN4v7BevU9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>city_LP</th>\n",
       "      <th>country</th>\n",
       "      <th>lp_url</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Antalya</td>\n",
       "      <td>mediterranean-coast/antalya</td>\n",
       "      <td>Turkey</td>\n",
       "      <td>https://www.lonelyplanet.com/Turkey/mediterran...</td>\n",
       "      <td>Once seen simply as the gateway to the Turkish...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Athens</td>\n",
       "      <td>Athens</td>\n",
       "      <td>Greece</td>\n",
       "      <td>https://www.lonelyplanet.com/Greece/Athens</td>\n",
       "      <td>With equal measures of grunge and grace, Athen...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ayia-napa</td>\n",
       "      <td>the-republic-of-cyprus/Agia-napa</td>\n",
       "      <td>Cyprus</td>\n",
       "      <td>https://www.lonelyplanet.com/Cyprus/the-republ...</td>\n",
       "      <td>Endless blue-sky days and a coastline riddled ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bangkok</td>\n",
       "      <td>Bangkok</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>https://www.lonelyplanet.com/Thailand/Bangkok</td>\n",
       "      <td>Same same, but different. This Thailish T-shir...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Barcelona</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>Spain</td>\n",
       "      <td>https://www.lonelyplanet.com/Spain/Barcelona</td>\n",
       "      <td>Barcelona is an enchanting seaside city with b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Venice</td>\n",
       "      <td>Venice</td>\n",
       "      <td>Italy</td>\n",
       "      <td>https://www.lonelyplanet.com/Italy/Venice</td>\n",
       "      <td>Imagine the audacity of building a city of mar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>Vienna</td>\n",
       "      <td>Vienna</td>\n",
       "      <td>Austria</td>\n",
       "      <td>https://www.lonelyplanet.com/Austria/Vienna</td>\n",
       "      <td>Baroque streetscapes and imperial palaces set ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>Warsaw</td>\n",
       "      <td>Warsaw</td>\n",
       "      <td>Poland</td>\n",
       "      <td>https://www.lonelyplanet.com/Poland/Warsaw</td>\n",
       "      <td>A phoenix arisen from the ashes, Poland's capi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Zakynthos</td>\n",
       "      <td>Zakynthos</td>\n",
       "      <td>Greece</td>\n",
       "      <td>https://www.lonelyplanet.com/Greece/Zakynthos</td>\n",
       "      <td>Zakynthos, also known by its Italian name Zant...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>https://www.lonelyplanet.com/Switzerland/Zurich</td>\n",
       "      <td>Culturally vibrant, efficiently run and attrac...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         city                           city_LP      country  \\\n",
       "0     Antalya       mediterranean-coast/antalya       Turkey   \n",
       "1      Athens                            Athens       Greece   \n",
       "2   Ayia-napa  the-republic-of-cyprus/Agia-napa       Cyprus   \n",
       "3     Bangkok                           Bangkok     Thailand   \n",
       "4   Barcelona                         Barcelona        Spain   \n",
       "..        ...                               ...          ...   \n",
       "71     Venice                            Venice        Italy   \n",
       "72     Vienna                            Vienna      Austria   \n",
       "73     Warsaw                            Warsaw       Poland   \n",
       "74  Zakynthos                         Zakynthos       Greece   \n",
       "75     Zurich                            Zurich  Switzerland   \n",
       "\n",
       "                                               lp_url  \\\n",
       "0   https://www.lonelyplanet.com/Turkey/mediterran...   \n",
       "1          https://www.lonelyplanet.com/Greece/Athens   \n",
       "2   https://www.lonelyplanet.com/Cyprus/the-republ...   \n",
       "3       https://www.lonelyplanet.com/Thailand/Bangkok   \n",
       "4        https://www.lonelyplanet.com/Spain/Barcelona   \n",
       "..                                                ...   \n",
       "71          https://www.lonelyplanet.com/Italy/Venice   \n",
       "72        https://www.lonelyplanet.com/Austria/Vienna   \n",
       "73         https://www.lonelyplanet.com/Poland/Warsaw   \n",
       "74      https://www.lonelyplanet.com/Greece/Zakynthos   \n",
       "75    https://www.lonelyplanet.com/Switzerland/Zurich   \n",
       "\n",
       "                                          description  \n",
       "0   Once seen simply as the gateway to the Turkish...  \n",
       "1   With equal measures of grunge and grace, Athen...  \n",
       "2   Endless blue-sky days and a coastline riddled ...  \n",
       "3   Same same, but different. This Thailish T-shir...  \n",
       "4   Barcelona is an enchanting seaside city with b...  \n",
       "..                                                ...  \n",
       "71  Imagine the audacity of building a city of mar...  \n",
       "72  Baroque streetscapes and imperial palaces set ...  \n",
       "73  A phoenix arisen from the ashes, Poland's capi...  \n",
       "74  Zakynthos, also known by its Italian name Zant...  \n",
       "75  Culturally vibrant, efficiently run and attrac...  \n",
       "\n",
       "[76 rows x 5 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cities_df['lp_url'] = cities_df.apply(lambda row: f'https://www.lonelyplanet.com/{row[\"country\"] if row[\"country\"].lower() != \"united states\" else \"usa\"}/{row[\"city_LP\"]}' if row['country'] else None, axis = 1)\n",
    "cities_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Em247uWnitqP"
   },
   "outputs": [],
   "source": [
    "def get_description_from_url(url):\n",
    "    if url:\n",
    "        page_res = requests.get(url)\n",
    "        if page_res.status_code == 200:\n",
    "        descriptions = BeautifulSoup(page_res.content, \"html.parser\").find_all('div', class_='readMore_content___5EuR')\n",
    "        if len(descriptions):\n",
    "            return descriptions[0].text\n",
    "\n",
    "cities_df['description'] = cities_df['lp_url'].apply(get_description_from_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "kvgIfK1FkSgs"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Antalya</td>\n",
       "      <td>Turkey</td>\n",
       "      <td>Once seen simply as the gateway to the Turkish...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Athens</td>\n",
       "      <td>Greece</td>\n",
       "      <td>With equal measures of grunge and grace, Athen...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ayia-napa</td>\n",
       "      <td>Cyprus</td>\n",
       "      <td>Endless blue-sky days and a coastline riddled ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bangkok</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>Same same, but different. This Thailish T-shir...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Barcelona</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Barcelona is an enchanting seaside city with b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Venice</td>\n",
       "      <td>Italy</td>\n",
       "      <td>Imagine the audacity of building a city of mar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>Vienna</td>\n",
       "      <td>Austria</td>\n",
       "      <td>Baroque streetscapes and imperial palaces set ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>Warsaw</td>\n",
       "      <td>Poland</td>\n",
       "      <td>A phoenix arisen from the ashes, Poland's capi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Zakynthos</td>\n",
       "      <td>Greece</td>\n",
       "      <td>Zakynthos, also known by its Italian name Zant...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>Culturally vibrant, efficiently run and attrac...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         city      country                                        description\n",
       "0     Antalya       Turkey  Once seen simply as the gateway to the Turkish...\n",
       "1      Athens       Greece  With equal measures of grunge and grace, Athen...\n",
       "2   Ayia-napa       Cyprus  Endless blue-sky days and a coastline riddled ...\n",
       "3     Bangkok     Thailand  Same same, but different. This Thailish T-shir...\n",
       "4   Barcelona        Spain  Barcelona is an enchanting seaside city with b...\n",
       "..        ...          ...                                                ...\n",
       "71     Venice        Italy  Imagine the audacity of building a city of mar...\n",
       "72     Vienna      Austria  Baroque streetscapes and imperial palaces set ...\n",
       "73     Warsaw       Poland  A phoenix arisen from the ashes, Poland's capi...\n",
       "74  Zakynthos       Greece  Zakynthos, also known by its Italian name Zant...\n",
       "75     Zurich  Switzerland  Culturally vibrant, efficiently run and attrac...\n",
       "\n",
       "[76 rows x 3 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LP_destinations = cities_df[['city', 'country', 'description']]\n",
    "LP_destinations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "id": "BGPU4q0qmEgv"
   },
   "outputs": [],
   "source": [
    "#LP_destinations.to_csv('LP_destinations.csv', index = False)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Shilat's Assignment.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
